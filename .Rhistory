fit_fix = lm(form, data = traits)
summary(fit_fix)
blue = fit_fix$coefficients
blue1 = blue[-c(1:4)] #remove replications
names(blue1)
blue = fit_fix$coefficients
blue1 = blue[-c(1:4)] #remove replications
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(temp1),
blue = temp1)
names(blue1)
blue = fit_fix$coefficients
blue
blue1 = blue[-c(1:8)] #remove replications
blue1 = c(0, blue1)
names(blue1)[1:10]
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1)
names(blue1)[1:10]
# summary(fit_fix)
blue = fit_fix$coefficients
blue1 = blue[-c(1:8)] #remove replications
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1)[1:10]
names(blue1)[1:10]
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
names(blue1)[1:10]
colnames(major0)
View(data_all_C_MajorAxisLength_mean)
treatment
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
colnames(traits.con)
majoraxis0 = cbind.data.frame(BLUE_func(traits.con, "MajorAxisLength", "control")
BLUE_func(traits.trt, "MajorAxisLength", "stress"))
majoraxis0 = cbind.data.frame(BLUE_func(traits.con, "MajorAxisLength", "control"),
BLUE_func(traits.trt, "MajorAxisLength", "stress"))
majoraxis0 = cbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits.con$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
blue1 = blue[-c(1:8)] #remove replications
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = cbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
traits$replication <- as.factor(traits$PlantNo.)
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
blue1 = blue[-c(1:8)] #remove replications
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = cbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control")
traits = traits.trt
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
form
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
names(blue)[1:10]
View(data_all_C_MajorAxisLength_mean)
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = cbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
names(blue)[1:10]
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
colnames(blue1)[1:10]
names(blue1)[1:10]
treatment
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
names(blue1)
names(blue)
treatment
treatment = "stress"
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
names(blue1)[1:10]
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = cbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
trait
length(names(blue1))
majoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "MajorAxisLength",
treatment = "stress"))
colnames(trait.con)
colnames(traits.con)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
grain_size <- read.csv("./dataset/raw_grain_size.csv")
traits.L = grain_size %>% group_split(Treatment)
traits.con = traits.L[[1]]
traits.L = grain_size %>% group_split(treatment)
traits.con = traits.L[[1]]
traits.trt = traits.L[[2]]
colnames(traits.con)
grain_size <- read.csv("./dataset/raw_grain_size.csv")
traits.L = grain_size %>% group_split(treatment)
traits.con = traits.L[[1]]
traits.trt = traits.L[[2]]
colnames(traits.con)
majoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_MajorAxisLength_mean",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_MajorAxisLength_mean",
treatment = "stress"))
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$PlantNo.)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_MajorAxisLength_mean",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_MajorAxisLength_mean",
treatment = "stress"))
colnames(traits.con)
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$replication)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_MajorAxisLength_mean",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_MajorAxisLength_mean",
treatment = "stress"))
minoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_MinorAxisLength_mean",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_MinorAxisLength_mean",
treatment = "stress"))
perimeter0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_Perimeter_mean",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_Perimeter_mean",
treatment = "stress"))
knitr::opts_chunk$set(echo = TRUE)
grain_size <- read.csv("./dataset/raw_grain_size.csv")
traits.L = grain_size %>% group_split(treatment)
library(tidyverse)
library(lme4)
traits.L = grain_size %>% group_split(treatment)
traits.con = traits.L[[1]]
traits.trt = traits.L[[2]]
colnames(traits.con)
BLUE_func <- function(traits, trait, treatment){
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$replication)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
if(treatment == "control"){
blue1 = blue[-c(1:8)] #remove replications
}else{
blue1 = blue[-c(1:7)]
}
blue1 = c(NSFTV_ID1 = 0, blue1)
names(blue1) = gsub("NSFTV_ID", "", names(blue1))
blue.df = data.frame(treatment = treatment,
NSFTV_ID = names(blue1),
blue = blue1)
return(blue.df)
}
majoraxis0 = rbind.data.frame(BLUE_func(traits = traits.con,
trait = "C_MajorAxisLength",
treatment = "control"),
BLUE_func(traits = traits.trt,
trait = "C_MajorAxisLength",
treatment = "stress"))
colnames(majoraxis0)
View(majoraxis0)
majoraxis0[majoraxis0$NSFTV_ID == "98", ]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
grain_size <- read.csv("./dataset/raw_grain_size.csv")
traits.L = grain_size %>% group_split(treatment)
traits.con = traits.L[[1]]
traits.trt = traits.L[[2]]
colnames(traits.con)
trias = traits.con
trait = "C_MajorAxisLength"
treatment = "control"
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits = traits.con
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$replication)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
head(blue)
traits = traits.trt
treatment = "stress"
traits$NSFTV_ID <- as.factor(traits$NSFTV_ID)
traits$replication <- as.factor(traits$replication)
form = as.formula(paste0(trait,"~-1 + replication + NSFTV_ID"))
fit_fix = lm(form, data = traits)
# summary(fit_fix)
blue = fit_fix$coefficients
head(blue)
unique(traits.trt$replication)
unique(traits.con$replication)
knitr::opts_chunk$set(echo = TRUE)
## Convert Geno into G matrix.
load("../Geno/geno.rr.RData") #geno_rr
library(tidyverse)
library(lme4)
library(readxl)
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
## Convert Geno into G matrix.
load("../Geno/geno.rr.RData") #geno_rr
## Convert Geno into G matrix.
load("../../Geno/geno.rr.RData") #geno_rr
## Convert Geno into G matrix.
load("../../../Geno/geno.rr.RData") #geno_rr
dim(geno_rr)
geno_rr[1:10,1:10]
#read into subpop info
panel_info_clean <- read.delim("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/Geno/raw_data/panel_info_clean.txt")
#read into subpop info
panel_info_clean <- read.delim("../../../Geno/raw_data/panel_info_clean.txt")
View(panel_info_clean)
table(panel_info_clean$Sample.set)
subpop <- panel_info_clean %>% filter(Sample.set == "RDP1")
subpop$Other.accession.ID = gsub("NSFTV", "NSFTV_", subpop$Other.accession.ID)
geno <- geno_rr
table(subpop$Other.accession.ID %in% rownames(geno_rr))
table(rownames(gen0) %in% subpop$Other.accession.ID) #all in suspop txt file.
table(rownames(geno) %in% subpop$Other.accession.ID) #all in suspop txt file.
colnames(subpop)
# map <- map_rr
load("../../../Geno/GL.RData")
View(GL)
all(GL[[1]] == GL[[2]])
G.rr = GL$Control
pca_sub_func=function(geno, Gchnt){
pop.df = subpop[subpop$Other.accession.ID %in% rownames(geno),]
pop.df = data.frame(NSFTV_ID = pop.df$Other.accession.ID,
Subpopu = pop.df$fastStructure.subpopulation.call)
G.df = data.frame(NSFTV_ID = rownames(Gchnt), Gchnt)
G.suspop = merge(G.df, pop.df)
return(G.suspop)
}
dim(G.rr)
View(G.rr)
pca_sub_func=function(geno, Gchnt){
pop.df = subpop[subpop$Other.accession.ID %in% rownames(geno),]
pop.df = data.frame(NSFTV_ID = pop.df$Other.accession.ID,
Subpopu = pop.df$fastStructure.subpopulation.call)
G.df = data.frame(NSFTV_ID = rownames(Gchnt), Gchnt)
G.suspop = merge(G.df, pop.df)
return(G.suspop)
}
G.suspop = pca_sub_func(geno = geno, Gchnt = G.rr)
table(G.suspop$Subpopu)
View(G.suspop)
colnames(G.suspop)
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop))], scale. = T)
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation") +
theme_bw()
library(tidyverse)
library(lme4)
library(readxl)
library(devtools)
library(ggbiplot)
install.packages("ggbiplot")
library(tidyverse)
library(lme4)
library(readxl)
library(devtools)
library(ggbiplot)
library(pheatmap)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggfortify)#draw pca plots
install.packages("ggfortify")
library(tidyverse)
library(lme4)
library(readxl)
library(devtools)
library(ggbiplot)
library(pheatmap)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggfortify)#draw pca plots
library(data.table)
G.suspop$Subpopulation = G.suspop$Subpopu
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop))], scale. = T)
G.suspop = pca_sub_func(geno = geno, Gchnt = G.rr)
table(G.suspop$Subpopu)
G.suspop$Subpopulation = G.suspop$Subpopu
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop))], scale. = T)
colnames(G.suspop)
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop), ncol(G.suspop)-1)], scale. = T)
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation") +
theme_bw()
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation") +
theme_bw()+
scale_color_brewer(palette = "Set1")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation") +
theme_bw()+
scale_color_brewer(palette = "Set2")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 3) +
theme_bw()+
scale_color_brewer(palette = "Set2")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Set2")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Set1")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Spectral")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "YlGnBr")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Set1")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Paired")
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Dark2")
autoplot?
?
????
/
?autoplot
View(cc.pca)
str(cc.pac)
str(cc.pca)
G.suspop$Subpopulation = G.suspop$Subpopu
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop), ncol(G.suspop)-1)], scale. = T)
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Dark2")
dev.print(pdf, file = file.path("../../../temp/pca_geno_comb.pdf"), height = 6, width = 8)
View(G.suspop)
colnames(G.suspop)
head(G.suspop$Subpopulation)
table(G.suspop$Subpopulation)
table(G.suspop$Subpopulation)[1]
paste(table(G.suspop$Subpopulation)[1])
as.vector(table(G.suspop$Subpopulation))
tmp = G.suspop
tmp1 = tmp %>% group_by(Subpopulation) %>% mutate(Subpopulation1 = paste0(Subpopulation, ":", n()))
tmp1$Subpopulation1
G.suspop = G.suspop %>% group_by(Subpopu) %>% mutate(Subpopulation = paste0(Subpopu, ":", n()))
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop), ncol(G.suspop)-1)], scale. = T)
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2) +
theme_bw()+
scale_color_brewer(palette = "Dark2")
# dev.print(pdf, file = file.path("../../../temp/pca_geno_comb.pdf"), height = 6, width = 8)
G.suspop = G.suspop %>% group_by(Subpopu) %>% mutate(Subpopulation = paste0(Subpopu, ":", n()))
cc.pca = prcomp(G.suspop[,-c(1, ncol(G.suspop), ncol(G.suspop)-1)], scale. = T)
autoplot(cc.pca, data = G.suspop, colour = "Subpopulation", size = 2.5) +
theme_bw()+
scale_color_brewer(palette = "Dark2")
dev.print(pdf, file = file.path("../../../temp/pca_geno_comb.pdf"), height = 6, width = 8)
