praise()
praise()
praise()
praise()
praise()
praise()
praise()
praise
?praise
praise("${Exclamation}! This ${rpackage} is ${adjective}!")
praise("${EXCLAMATION}! You have done this ${adverb_manner}!")
library(readr)
X2024_05_08T2323_Grades_ALS_3104_10337_202401 <- read_csv("Desktop/2024-05-08T2323_Grades-ALS_3104_10337_202401.csv")
View(X2024_05_08T2323_Grades_ALS_3104_10337_202401)
View(X2024_05_08T2323_Grades_ALS_3104_10337_202401)
View(X2024_05_08T2323_Grades_ALS_3104_10337_202401)
install.packages("AlphaSimR")
setwd("~/OneDrive - Virginia Tech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
met_rr_control <- read.csv("../../../Met/met_rr_control_named.csv")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
library(tidyverse)
library(lme4)
library(readxl)
library(devtools)
library(ggbiplot)
library(pheatmap)
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(ggfortify)#draw pca plots
library(data.table)
met_path = "../../Met"
geno_path = "../../Geno"
met_rr_control <- read.csv("../../../Met/met_rr_control_named.csv")
## Convert Geno into G matrix.
load("../../../Geno/geno.rr.RData") #geno_rr
knitr::opts_knit$set(root.dir = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
met_rr_control <- read.csv("../../../Met/met_rr_control_named.csv")
met_rr_control <- read.csv("../../Met/met_rr_control_named.csv")
met_rr_stress <- read.csv("../../Met/met_rr_stress_named.csv")
met_rr_control <- read.csv("../../Met/met_rr_control_named.csv")
met_rr_stress <- read.csv("../../Met/met_rr_stress_named.csv")
id_control <- met_rr_control$NSFTV_ID
rownames(met_rr_control) = met_rr_control$NSFTV_ID
rownames(met_rr_stress) = met_rr_stress$NSFTV_ID
Mcs.con = scale(met_rr_control[,-c(1:2)])
Mchnt.con = tcrossprod(Mcs.con)/ncol(Mcs.con)
M.rr.con = cbind.data.frame(NSFTV_ID = rownames(Mchnt.con), Mchnt.con)
Mcs.trt = scale(met_rr_stress[,-c(1:2)])
Mchnt.trt = tcrossprod(Mcs.trt)/ncol(Mcs.trt)
M.rr.trt = cbind.data.frame(NSFTV_ID = rownames(Mchnt.trt), Mchnt.trt)
## Convert Geno into G matrix.
load("../../Geno/geno.rr.RData") #geno_rr
geno <- geno_rr
# map <- map_rr
load("../../Geno/GL.RData")
G.rr = GL$Control
G.rr = cbind.data.frame(NSFTV_ID = rownames(G.rr), G.rr)
#read into subpop info
panel_info_clean <- read.delim("../../Geno/raw_data/panel_info_clean.txt")
subpop <- panel_info_clean %>% filter(Sample.set == "RDP1")
subpop$Other.accession.ID = gsub("NSFTV", "NSFTV_", subpop$Other.accession.ID)
table(subpop$Other.accession.ID %in% rownames(G.rr))
table(rownames(G.rr) %in% subpop$Other.accession.ID) #all in suspop txt file.
table(subpop$Other.accession.ID %in% M.rr.con$NSFTV_ID)
table(M.rr.con$NSFTV_ID %in% subpop$Other.accession.ID) #all in suspop txt file.
all(M.rr.con$NSFTV_ID == M.rr.trt$NSFTV_ID)
pca_sub_func=function(MM, subpop){
pop.df = subpop[subpop$Other.accession.ID %in% MM$NSFTV_ID,]
pop.df = data.frame(NSFTV_ID = pop.df$Other.accession.ID,
Subpopu = pop.df$fastStructure.subpopulation.call)
# MM.df = data.frame(NSFTV_ID = MM$NSFTV_ID, MM)
MM.suspop = merge(MM, pop.df)
return(MM.suspop)
}
G.suspop = pca_sub_func(MM=G.rr, subpop=subpop)
table(G.suspop$Subpopu)
met_control.suspop = pca_sub_func(MM=M.rr.con, subpop=subpop)
table(met_control.suspop$Subpopu)
met_stress.suspop = pca_sub_func(MM=M.rr.trt, subpop=subpop)
table(met_stress.suspop$Subpopu)
suspop.df = data.frame(NSFTV_ID = met_control.suspop$NSFTV_ID,
Subpopu = met_control.suspop$Subpopu)
# write.csv(suspop.df, file = file.path("../../../Met/raw_data/subpopulation.csv"), row.names = F, quote = F)
View(subpop)
unique(subpop$fastStructure.subpopulation.call)
tools::toTitleCase(unique(subpop$fastStructure.subpopulation.call))
#read into subpop info
panel_info_clean <- read.delim("../../Geno/raw_data/panel_info_clean.txt")
subpop <- panel_info_clean %>% filter(Sample.set == "RDP1")
subpop$Other.accession.ID = gsub("NSFTV", "NSFTV_", subpop$Other.accession.ID)
subpop$fastStructure.subpopulation.call = tools::toTitleCase(subpop$fastStructure.subpopulation.call)
table(subpop$Other.accession.ID %in% rownames(G.rr))
table(rownames(G.rr) %in% subpop$Other.accession.ID) #all in suspop txt file.
table(subpop$Other.accession.ID %in% M.rr.con$NSFTV_ID)
table(M.rr.con$NSFTV_ID %in% subpop$Other.accession.ID) #all in suspop txt file.
all(M.rr.con$NSFTV_ID == M.rr.trt$NSFTV_ID)
pca_sub_func=function(MM, subpop){
pop.df = subpop[subpop$Other.accession.ID %in% MM$NSFTV_ID,]
pop.df = data.frame(NSFTV_ID = pop.df$Other.accession.ID,
Subpopu = pop.df$fastStructure.subpopulation.call)
# MM.df = data.frame(NSFTV_ID = MM$NSFTV_ID, MM)
MM.suspop = merge(MM, pop.df)
return(MM.suspop)
}
G.suspop = pca_sub_func(MM=G.rr, subpop=subpop)
table(G.suspop$Subpopu)
met_control.suspop = pca_sub_func(MM=M.rr.con, subpop=subpop)
table(met_control.suspop$Subpopu)
met_stress.suspop = pca_sub_func(MM=M.rr.trt, subpop=subpop)
table(met_stress.suspop$Subpopu)
suspop.df = data.frame(NSFTV_ID = met_control.suspop$NSFTV_ID,
Subpopu = met_control.suspop$Subpopu)
# write.csv(suspop.df, file = file.path("../../../Met/raw_data/subpopulation.csv"), row.names = F, quote = F)
pca_plot_drawing_func = function(suspop, name){
suspop = suspop %>% group_by(Subpopu) %>% mutate(Subpopu = paste0(Subpopu, ":", n()))
cc.pca = prcomp(suspop[,!(colnames(suspop) %in% c('NSFTV_ID', 'Subpopu'))], scale. = T)
p = autoplot(cc.pca, data = suspop, colour = "Subpopu", size = 2.5) +
theme_bw()+
labs(color = "Subpopulation")+
scale_color_brewer(palette = "Dark2")
p
return(p)
}
p_G = pca_plot_drawing_func(suspop = G.suspop, name = 'geno')
p_met_control = pca_plot_drawing_func(suspop = met_control.suspop, name = 'met_control')
p_met_control
p_met_stress = pca_plot_drawing_func(suspop = met_stress.suspop, name = 'met_stress')
p_met_stress
library(ggpubr)
ggarrange(NULL,
p_met_control,
NULL,
p_met_stress,
nrow = 4,
heights = c(0.2,3,0.2,3),
labels = c("","(A)","", "(B)"), vjust = c(0,-0.5,0,0), #To show the entire (A) label, adjuest vjust and add NULL
# vjust=-0.1,
legend = "right",
common.legend = T)
dev.print(pdf, file="../../../temp/pca_met.pdf", height=10, width=7)
pca_plot_drawing_func = function(suspop, name){
suspop = suspop %>% group_by(Subpopu) %>% mutate(Subpopu = paste0(Subpopu, ":", n()))
cc.pca = prcomp(suspop[,!(colnames(suspop) %in% c('NSFTV_ID', 'Subpopu'))], scale. = T)
p = autoplot(cc.pca, data = suspop, colour = "Subpopu", size = 2.5) +
theme_bw()+
labs(color = "Subpopulation")+
scale_color_brewer(palette = "Dark2")
p
return(p)
}
p_G = pca_plot_drawing_func(suspop = G.suspop, name = 'geno')
p_met_control = pca_plot_drawing_func(suspop = met_control.suspop, name = 'met_control')
p_met_control
p_met_stress = pca_plot_drawing_func(suspop = met_stress.suspop, name = 'met_stress')
p_met_stress
library(ggpubr)
ggarrange(NULL,
p_met_control,
NULL,
p_met_stress,
nrow = 4,
heights = c(0.2,3,0.2,3),
labels = c("","(A)","", "(B)"), vjust = c(0,-0.5,0,0), #To show the entire (A) label, adjuest vjust and add NULL
# vjust=-0.1,
legend = "right",
common.legend = T)
dev.print(pdf, file="../../temp/pca_met.pdf", height=10, width=7)
p_G
pca_plot_drawing_func = function(suspop, name){
suspop = suspop %>% group_by(Subpopu) %>% mutate(Subpopu = paste0(Subpopu, ":", n()))
cc.pca = prcomp(suspop[,!(colnames(suspop) %in% c('NSFTV_ID', 'Subpopu'))], scale. = T)
p = autoplot(cc.pca, data = suspop, colour = "Subpopu", size = 2.5) +
theme_bw()+
labs(color = "Subpopulation")+
scale_color_brewer(palette = "Dark2")
p
return(p)
}
p_G = pca_plot_drawing_func(suspop = G.suspop, name = 'geno')
p_G
dev.print(pdf, file="../../temp/pca_geno.pdf", height=10, width=7)
p_G
dev.print(pdf, file="../../temp/pca_geno.pdf", height=7, width=7)
pca_plot_drawing_func = function(suspop, name){
suspop = suspop %>% group_by(Subpopu) %>% mutate(Subpopu = paste0(Subpopu, ":", n()))
cc.pca = prcomp(suspop[,!(colnames(suspop) %in% c('NSFTV_ID', 'Subpopu'))], scale. = T)
p = autoplot(cc.pca, data = suspop, colour = "Subpopu", size = 2.5) +
theme_bw()+
labs(color = "Subpopulation")+
scale_color_brewer(palette = "Dark2")
p
return(p)
}
p_G = pca_plot_drawing_func(suspop = G.suspop, name = 'geno')
p_G
dev.print(pdf, file="../../temp/pca_geno.pdf", height=7, width=10)
pca_plot_drawing_func = function(suspop, name){
suspop = suspop %>% group_by(Subpopu) %>% mutate(Subpopu = paste0(Subpopu, ":", n()))
cc.pca = prcomp(suspop[,!(colnames(suspop) %in% c('NSFTV_ID', 'Subpopu'))], scale. = T)
p = autoplot(cc.pca, data = suspop, colour = "Subpopu", size = 2.5) +
theme_bw()+
labs(color = "Subpopulation")+
scale_color_brewer(palette = "Dark2")
p
return(p)
}
p_G = pca_plot_drawing_func(suspop = G.suspop, name = 'geno')
p_G
dev.print(pdf, file="../../temp/pca_geno_comb.pdf", height=6, width=9)
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
library(tidyverse)
library(ggplot2)
library(plyr)
library(ggpubr)
library(ggrepel)
library(tidyverse)
library(stargazer)
library(patchwork)
library(ggplot2)
source("../Functions/functions.R")
met_names = met_name_func(mode = 'name')
path.bglr_subpop = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_subpopulation"
load_pred_corr_func_subpop <- function(path, namm, kernel){
PredCorr_conL <- list()
PredCorr_trtL <- list()
nCV = 4
for (i in 1:nCV){
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0("Control_",namm,"cv_",i,".RDS")))
PredCorr_trtL[[i]] <- readRDS(file=file.path(path,paste0("Stress_",namm,"cv_",i,".RDS")))
}
corr.c.df <- do.call(rbind, PredCorr_conL)
corr.c.df = corr.c.df[,1:66]
colnames(corr.c.df)= met_names
corr.t.df <- do.call(rbind, PredCorr_trtL)
corr.t.df = corr.t.df[,1:66]
colnames(corr.t.df) = met_names
temp1 <- reshape2::melt(corr.c.df)
temp2 <- reshape2::melt(corr.t.df)
temp3 <- rbind.data.frame(temp1,temp2)
temp3$group <- rep(c("Control", "Stress"), each = 66*nCV)
colnames(temp3) <- c("CV", "Met", "Corr", "Treatment")
temp3$Kernel = kernel
temp3$Met = factor(temp3$Met, levels = met_names)
temp3 = temp3 %>% arrange(CV, Treatment)
return(temp3)
}
PreCorr_subpop = load_pred_corr_func_subpop(path=path.bglr_subpop, kernel = "subpop", namm='bglr_')
PreCorr_subpop$CV = as.factor(PreCorr_subpop$CV)
subss = c('aus', 'indica', 'temperate-japonica', 'tropical-japonica')
for(i in 1:4){
PreCorr_subpop$CV = gsub(i, subss[i], PreCorr_subpop$CV)
}
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation prediction", color = "Subpopulation prediction")
Pred_Cor_boxplot
# dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
path.bglr_subpop = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_subpopulation"
load_pred_corr_func_subpop <- function(path, namm, kernel){
PredCorr_conL <- list()
PredCorr_trtL <- list()
nCV = 4
for (i in 1:nCV){
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0("Control_",namm,"cv_",i,".RDS")))
PredCorr_trtL[[i]] <- readRDS(file=file.path(path,paste0("Stress_",namm,"cv_",i,".RDS")))
}
corr.c.df <- do.call(rbind, PredCorr_conL)
corr.c.df = corr.c.df[,1:66]
colnames(corr.c.df)= met_names
corr.t.df <- do.call(rbind, PredCorr_trtL)
corr.t.df = corr.t.df[,1:66]
colnames(corr.t.df) = met_names
temp1 <- reshape2::melt(corr.c.df)
temp2 <- reshape2::melt(corr.t.df)
temp3 <- rbind.data.frame(temp1,temp2)
temp3$group <- rep(c("Control", "Stress"), each = 66*nCV)
colnames(temp3) <- c("CV", "Met", "Corr", "Treatment")
temp3$Kernel = kernel
temp3$Met = factor(temp3$Met, levels = met_names)
temp3 = temp3 %>% arrange(CV, Treatment)
return(temp3)
}
PreCorr_subpop = load_pred_corr_func_subpop(path=path.bglr_subpop, kernel = "subpop", namm='bglr_')
PreCorr_subpop$CV = as.factor(PreCorr_subpop$CV)
subss = tool::toTitleCase(c('aus', 'indica', 'temperate-japonica', 'tropical-japonica'))
subss = tools::toTitleCase(c('aus', 'indica', 'temperate-japonica', 'tropical-japonica'))
for(i in 1:4){
PreCorr_subpop$CV = gsub(i, subss[i], PreCorr_subpop$CV)
}
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation prediction", color = "Subpopulation prediction")
Pred_Cor_boxplot
# dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation prediction", color = "Subpopulation prediction")
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
met_rr_control <- read.csv("../../Met/met_rr_control_named.csv")
met_rr_stress <- read.csv("../../Met/met_rr_stress_named.csv")
colnames(met_rr_control)
table(met_rr_control$NSFTV_ID %in% subpop$Other.accession.ID)
met_control.suspop = pca_sub_func(MM=M.rr.con, subpop=subpop)
table(met_control.suspop$Subpopu)
met_stress.suspop = pca_sub_func(MM=M.rr.trt, subpop=subpop)
table(met_stress.suspop$Subpopu)
met_stress.suspop = pca_sub_func(MM=M.met_rr_stress, subpop=subpop)
met_control.suspop = pca_sub_func(MM=met_rr_control, subpop=subpop)
table(met_control.suspop$Subpopu)
met_stress.suspop = pca_sub_func(MM=met_rr_stress, subpop=subpop)
table(met_stress.suspop$Subpopu)
View(met_control.suspop)
boxplot(met_control.suspop$Subpopu)
View(pca_plot_drawing_func)
View(pca_plot_drawing_func)
View(pca_sub_func)
View(pred_dff_generator)
View(pred_mean_generator)
colnames(met_control.suspop)
pivot_longer(met_control.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("NSFTV_ID", "Treatment", "Subpopu"))
tmp = pivot_longer(met_control.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("NSFTV_ID", "Treatment", "Subpopu"))
View(tmp)
tmp = pivot_longer(met_control.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("Treatment", "Subpopu"))
tmp = pivot_longer(met_control.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("NSFTV_ID", "Treatment", "Subpopu"))
10692/66
boxplot(tmp$Subpopu)
boxplot(tmp$Subpopu, tmp$Met_value)
?boxplot
boxplot(Met_value ~ Subpopu, data = tmp)
tmp$Subpopu = as.factor(tmp$Subpopu)
boxplot(Met_value ~ Subpopu, data = tmp)
met_control.suspop.long= pivot_longer(met_control.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("NSFTV_ID", "Treatment", "Subpopu"))
met_control.suspop.long$Subpopu = as.factor(met_control.suspop.long$Subpopu)
boxplot(Met_value ~ Subpopu, data = met_control.suspop.long)
met_stress.suspop.long= pivot_longer(met_stress.suspop, names_to = "Met", values_to = 'Met_value', cols = -c("NSFTV_ID", "Treatment", "Subpopu"))
met_stress.suspop.long$Subpopu = as.factor(met_stress.suspop.long$Subpopu)
boxplot(Met_value ~ Subpopu, data = met_stress.suspop.long)
library(ggplot2)
ggplot(met_stress.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(title = "Boxplot of Met_value by Subpopu with Treatment Colors",
x = "Subpopu", y = "Met_value") +
theme_minimal()
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(title = "Boxplot of Met_value by Subpopu with Treatment Colors",
x = "Subpopu", y = "Met_value") +
theme_minimal()
met.suspop.long = rbind(met_control.suspop.long, met_stress.suspop.long)
library(ggplot2)
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(title = "Boxplot of Met_value by Subpopu with Treatment Colors",
x = "Subpopu", y = "Met_value") +
theme_minimal()
# Perform ANOVA
anova_result <- aov(Met_value ~ Subpopu, data = met.suspop.long)
# View the summary of the ANOVA
summary(anova_result)
# Perform ANOVA
met.suspop.long$Subpopu = as.factor(met.suspop.long$Subpopu)
anova_result <- aov(Met_value ~ Subpopu, data = met.suspop.long)
# View the summary of the ANOVA
summary(anova_result)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(anova_result)
# View the Tukey HSD results
print(tukey_result)
unique(met.suspop.long$Subpopu)
tools::toTitleCase(c('aus', 'indica', 'temperate-japonica', 'tropical-japonica'))
colnames(met.suspop.long)
met.suspop.long = met.suspop.long %>% filter(Subpopu %in% tools::toTitleCase(c('aus', 'indica', 'temperate-japonica', 'tropical-japonica')))
library(ggplot2)
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(title = "Boxplot of Met_value by Subpopu with Treatment Colors",
x = "Subpopu", y = "Met_value") +
theme_minimal()
# Perform ANOVA
met.suspop.long$Subpopu = as.factor(met.suspop.long$Subpopu)
anova_result <- aov(Met_value ~ Subpopu, data = met.suspop.long)
# View the summary of the ANOVA
summary(anova_result)
# Perform Tukey's HSD test
tukey_result <- TukeyHSD(anova_result)
# View the Tukey HSD results
print(tukey_result)
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(title = "Boxplot of Met_value by Subpopu with Treatment Colors",
x = "Subpopu", y = "Met_value") +
theme_minimal()
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(x = "Subpopulation", y = "Metabolite accumulation") +
theme_minimal()
met.suspop.long$Treatment = factors(met.suspop.long$Treatment, levels=c('Stress', 'Control'))
met.suspop.long$Treatment = factor(met.suspop.long$Treatment, levels=c('Stress', 'Control'))
ggplot(met.suspop.long, aes(x = Subpopu, y = Met_value, fill = Treatment)) +
geom_boxplot() +
labs(x = "Subpopulation", y = "Metabolite accumulation") +
theme_minimal()
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation predicted", color = "Subpopulation prediction")
Pred_Cor_boxplot
# dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation predicted", color = "Subpopulation prediction")
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr_subpop
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(8, "Dark2")[5:8]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = CV, fill = CV) +
facet_grid(rows = vars(Treatment))+
geom_point(aes(fill=CV, color = CV))+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.5, 0.65), breaks=seq(-0.5,0.7,0.2)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
# scale_color_brewer(palette = "Dark2")+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))+
labs(fill = "Subpopulation predicted", color = "Subpopulation predicted")
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/subpopulation_gblup.pdf", height = 6, width = 10)
