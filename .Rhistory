view(subpop_gblup)
colnames(subpop_gblup)
subpop_gblup %>% group_by(Treatment, CV_subpop) %>% summarise(diff_mean = mean(diff))
ddply(subpop_gblup, c("Treatment", "CV_subpop"), summarise, corr.mean=mean(Corr, na.rm=T))
ddply(subpop_gblup, c("Treatment", "CV_subpop"), summarise, corr.mean=mean(diff, na.rm=T))
subpop_gblup %>% group_by(Treatment, CV_subpop) %>% summarise(diff_mean = mean(diff, na.rm = T))
subpop_gblup$Treatment = as.factor(subpop_gblup$Treatment)
subpop_gblup$CV_subpop = as.factor(subpop_gblup$Corr_gblup)
subpop_gblup %>% group_by(Treatment, CV_subpop) %>% summarise(diff_mean = mean(diff, na.rm = T))
gblup = mu_perMet
colnames(gblup)[colnames(gblup) == 'value'] = 'Corr_gblup'
subpop = df
colnames(subpop)[colnames(subpop) == "CV"] <- "CV_subpop"
subpop_gblup = merge(subpop, gblup, by=c('Met', 'Treatment'))
subpop_gblup$diff = (subpop_gblup$Corr - subpop_gblup$Corr_gblup)/subpop_gblup$Corr_gblup * 100
ddply(subpop_gblup, c("Treatment", "CV_subpop"), summarise, corr.mean=mean(diff, na.rm=T))
cat(ddply(subpop_gblup, c("Treatment", "CV_subpop"), summarise, corr.mean=mean(diff, na.rm=T)))
mean1 = ddply(subpop_gblup, c("Treatment", "CV_subpop"), summarise, corr.mean=mean(diff, na.rm=T))
print(mean1)
print(mean1)
cat(mean1)
print(mean1, row.name=F)
#################################################################
path.output = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/"
path.geno = "../../Geno"
library(BGLR)
library(tidyverse)
# G matrix
load("../../Geno/GL.RData")
treatment = 'Control'
G <- GL[[treatment]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# name <- c(paste0("a",1:10),paste0("b",1:10),paste0("c",1:10),paste0("d",1:10),paste0("e",1:10),paste0("f",1:10),paste0("g",1:10),paste0("h",1:3))
# met2remove=c(13,28,30,38,62,67)
# name = name[-met2remove]
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
names(G)
names(GL)
met_control <- met0 %>% filter(Treatment == 'Control')
i = 1
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control <- met0 %>% filter(Treatment == 'Control')
met_stress <- met0 %>% filter(Treatment == 'Stress')
view(met_stress)
view(met0)
colnames(met_control)
all(met_control[,1:2] == met_stress[, 1:2])
all(met_control[,1] == met_stress[, 1])
all(colnames(met_control) == colnames(met_stress))
dim(met_control)
colnames(met_control)
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control <- met0 %>% filter(Treatment == 'Control')
met_control = met_control[, !(colnames(met_control) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress[, !(colnames(met_stress) %in% c('NSFTV_ID', 'Treatment', 'set'))]
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control[, !(colnames(met_control) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
all(met_control0$set == met_stress0$set)
met_control0$set
met_stress0$set
met_stress0$set == met_control0$set
met_control - met_stress
tt = met_control - met_stress
amet_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
view(met_delta)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
name
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "Treatment", "set"))
y <- y0
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
index
162*0.2
y[index, ] <- NA
j = 1
cat("Now running nCV = ", i,"trait = ", colnames(y)[j], "\n")
ySingle <- y[, j]
view(met_delta)
all(met_delta$a1 == ySingle)
met_delta$a1
plot(met_delta$a1, ySingle)
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
cor(pred1[index], y0[index,j])
path.output
#################################################################
pred_func <- function(treatment, method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[treatment]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0(treatment, "_", method, "_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
all(GL[['Control']] == GL[["Stress"]])
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0(treatment, "_", method, "_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func(method = "bglr")
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func(method = "bglr")
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func(method = "bglr")
#################################################################
pred_func <- function(){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in ia:ib) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func(method = 'bglr')
#################################################################
pred_func <- function(method){
# G matrix
load("../../Geno/GL.RData")
G <- GL[[1]]
EVD_G <- eigen(G)
# Set up kernel for GBLUP
ETA1 <- list(
G = list(V=EVD_G$vectors, d=EVD_G$values, model='RKHS')
)
nCV = 100
# predictive correlation
corR_GBLUP <- matrix(0, ncol = 66, nrow = nCV) #GBLUP
colnames(corR_GBLUP) = name
# CV
for (i in 1:nCV) {
# random-sampling to decide testing & reference accessions
met0 = read.csv(paste0("../../Met/CrossValidation/cv_",i,"/met_cv_",i,".csv"))
met_control0 <- met0 %>% filter(Treatment == 'Control')
met_control = met_control0[, !(colnames(met_control0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_stress0 <- met0 %>% filter(Treatment == 'Stress')
met_stress = met_stress0[, !(colnames(met_stress0) %in% c('NSFTV_ID', 'Treatment', 'set'))]
met_delta = data.frame(NSFTV_ID = met_control0$NSFTV_ID,
set = met_control0$set,
met_control - met_stress)
met = met_delta
name <- colnames(met)[!(colnames(met) %in% c('NSFTV_ID', 'Treatment', 'set', 'Subpopu'))]
colnames(corR_GBLUP) = name
index <- which(met$set=="test")# random sampling
y0 <- dplyr::select(met, -c("NSFTV_ID", "set"))
y <- y0
y[index, ] <- NA
for (j in 1:ncol(y0)){
cat("Now running nCV = ", i,"trait = ", colnames(y0)[j], "\n")
ySingle <- y[, j]
# #GBLUP
if(method == 'bglr'){
fit1 <- BGLR(y=ySingle, ETA=ETA1, nIter = 10000,
burnIn = 3000, thin = 5, verbose = F)
pred1 = fit1$yHat
corR_GBLUP[i,j] <- cor(pred1[index], y0[index,j])
}
}
#save results for every CV iteration.
saveRDS(corR_GBLUP[i, ], file=file.path(path.output, paste0("delta_cv_",i,".RDS")))
}
# save(corR_GBLUP, file=file.path(path.output, paste0(treatment, "_", method,"_r2_", R20, ".rda")))
}
#################################################################
pred_func(method = 'bglr')
View(ETA1)
matrx(1,2,3)
matrix(1,10,1)
matrix(1, 10,1)
?matrix
