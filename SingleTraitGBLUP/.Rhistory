library(tidyverse)
library(ggplot2)
library(plyr)
library(ggpubr)
library(ggrepel)
library(tidyverse)
library(stargazer)
library(patchwork)
library(ggplot2)
source("../../Functions/functions.R")
met_names = met_name_func(mode = 'name')
source("../../Functions/functions.R")
met_names = met_name_func(mode = 'name')
load_h2 = function(prepro, gblup){
load(paste0("../temp/", prepro,"/", gblup, "/Control_",gblup,"_h2.rda" ))
h2varcon <- as.data.frame(do.call(rbind, h2L))
# h2varcon = h2varcon[-30,] #remove d3 from met.
load(paste0("../temp/", prepro,"/", gblup, "/Stress_",gblup,"_h2.rda" ))
h2vartrt <- as.data.frame(do.call(rbind, h2L))
# h2vartrt = h2vartrt[-30,]
h2 = c(h2varcon$h2, h2vartrt$h2)
varE = c(h2varcon$varE, h2vartrt$varE)
varG = c(h2varcon$varG, h2vartrt$varG)
df = data.frame(Met=met_names,
h2=h2,
varE = varE,
varG = varG,
Treatment = rep(c("Control", "Stress"), each=66))
df.long <- reshape2::melt(df, id.vars = c('Met', 'Treatment'))
h2.df.long <- df.long %>% filter(variable == 'h2') %>% droplevels()
colnames(h2.df.long) <- c("Met", "Treatment", "variable", "value")
h2.df.long$Treatment <- as.factor(h2.df.long$Treatment)
h2.df.long$Met <- factor(h2.df.long$Met, levels=unique(h2.df.long$Met))
h2.df.long$Kernel <- paste0(prepro, "-G-", gblup)
return(h2.df.long)
}
h22L = list()
m= 1
for(i in c("log_lmer")){
for(j in c("sommer")){
h22L[[m]] = load_h2(i, j)
m = m+1
}
}
source("../../Functions/functions.R")
met_names = met_name_func(mode = 'name')
load_h2 = function(prepro, gblup){
load(paste0("../../../temp/", prepro,"/", gblup, "/Control_",gblup,"_h2.rda" ))
h2varcon <- as.data.frame(do.call(rbind, h2L))
# h2varcon = h2varcon[-30,] #remove d3 from met.
load(paste0("../../../temp/", prepro,"/", gblup, "/Stress_",gblup,"_h2.rda" ))
h2vartrt <- as.data.frame(do.call(rbind, h2L))
# h2vartrt = h2vartrt[-30,]
h2 = c(h2varcon$h2, h2vartrt$h2)
varE = c(h2varcon$varE, h2vartrt$varE)
varG = c(h2varcon$varG, h2vartrt$varG)
df = data.frame(Met=met_names,
h2=h2,
varE = varE,
varG = varG,
Treatment = rep(c("Control", "Stress"), each=66))
df.long <- reshape2::melt(df, id.vars = c('Met', 'Treatment'))
h2.df.long <- df.long %>% filter(variable == 'h2') %>% droplevels()
colnames(h2.df.long) <- c("Met", "Treatment", "variable", "value")
h2.df.long$Treatment <- as.factor(h2.df.long$Treatment)
h2.df.long$Met <- factor(h2.df.long$Met, levels=unique(h2.df.long$Met))
h2.df.long$Kernel <- paste0(prepro, "-G-", gblup)
return(h2.df.long)
}
h22L = list()
m= 1
for(i in c("log_lmer")){
for(j in c("sommer")){
h22L[[m]] = load_h2(i, j)
m = m+1
}
}
H2h2.df.long <- rbind.data.frame(h22L[[1]])
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10,3)]
h2_scatter <- ggplot(H2h2.df.long, aes(x=Met, y=value)) +
geom_point(aes(colour=Treatment), size=2) +
# geom_text(hjust=0, vjust=0, size = 2)+
facet_grid(rows = vars(Treatment))+
labs(x="Metabolite", y = "Heritability") +
scale_y_continuous(limits=c(0, 1), breaks=c(0,0.2,0.4,0.6,0.8, 1)) +
# theme_classic()+
theme_bw()+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8),
axis.title.y = element_text(margin = margin(r=6)))
h2_scatter
# dev.print(pdf, file="../temp/h2_scatter_plot.pdf", height=6, width=10)
comp_h2 = compare_plot_generator(df = H2h2.df.long,
up_thr = 0.02,
low_thr = 0.2,
limits_range = c(0,0.8),
breaks_range = seq(0,0.8,0.1))
comp_h2
# dev.print(pdf, file="../temp/h2_compare.pdf", height=8, width=8)
H2h2.df.long <- rbind.data.frame(h22L[[1]])
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10,3)]
h2_scatter <- ggplot(H2h2.df.long, aes(x=Met, y=value)) +
geom_point(aes(colour=Treatment), size=2) +
# geom_text(hjust=0, vjust=0, size = 2)+
facet_grid(rows = vars(Treatment))+
labs(x="Metabolite accumulation", y = "Heritability") +
scale_y_continuous(limits=c(0, 1), breaks=c(0,0.2,0.4,0.6,0.8, 1)) +
# theme_classic()+
theme_bw()+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8),
axis.title.y = element_text(margin = margin(r=6)))
h2_scatter
# dev.print(pdf, file="../temp/h2_scatter_plot.pdf", height=6, width=10)
comp_h2 = compare_plot_generator(df = H2h2.df.long,
up_thr = 0.02,
low_thr = 0.2,
limits_range = c(0,0.8),
breaks_range = seq(0,0.8,0.1))
comp_h2
# dev.print(pdf, file="../temp/h2_compare.pdf", height=8, width=8)
df = h22L[[1]]
h2_density = density_plot_generator(df = df,
my_colors=RColorBrewer::brewer.pal(11, 'Spectral')[c(10,3)],
limits_range = c(0,1),
breaks_range = seq(0,1,0.2),
x_name = "Heritability",
ylim = NULL,
lines = T)
h2_density
# dev.print(pdf, file=paste0("../temp/h2_density.pdf"), height=4, width=8)
ggarrange(h2_scatter,
NULL,
ggarrange(h2_density, comp_h2,
ncol = 2, labels = c("(B)", "(C)"),
vjust=-0.1,
common.legend = F,
widths = c(1.2, 1)),
nrow = 3,
labels = c("(A)", ""), vjust=1.2, hjust=0,
heights = c(1.8, 0.1, 1),# Labels of the scatter plot
common.legend = F )
dev.print(pdf, file=paste0("../../../temp/h2_plots.pdf"), height=10, width=10)
####functions.R
FA_h2_den=FA_density_plot_generator(df=h22L[[1]],
my_colors = RColorBrewer::brewer.pal(11, 'Spectral')[c(11,10,9,8,7,5,4,3,2,1)],
limits_range = c(0,1),
breaks_range = seq(0,1,0.2),
x_name = "Heritability",
ylim = NULL)
FA_h2_den
# dev.print(pdf, file=paste0("../temp/FA_h2_density.pdf"), height=4, width=8)
ggarrange(h2_scatter,
NULL,
ggarrange(h2_density, comp_h2,
ncol = 2, labels = c("(B)", "(C)"),
vjust=-0.1,
common.legend = F,
widths = c(1.2, 1)),
nrow = 3,
labels = c("(A)", ""), vjust=1.2, hjust=0,
heights = c(1.8, 0.1, 1),# Labels of the scatter plot
common.legend = F )
dev.print(pdf, file=paste0("../../../temp/h2_plots.pdf"), height=10, width=10)
library(tidyverse)
library(ggplot2)
library(plyr)
library(ggpubr)
library(ggrepel)
library(tidyverse)
library(stargazer)
library(patchwork)
library(ggplot2)
source("../../functions.R")
source("../../Functions/functions.R")
met_names = met_name_func(mode = 'name')
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/GBLUP4Met_github_beta/GBLUP/SingleTraitGBLUP")
path.bglr = "../../ARC_outputs/Met_same_genotypes_per_treatment/GBLUP/outputs_GBLUP/"
PreCorr = load_pred_corr_func(path=path.bglr, kernel = "BGLR", namm=NULL)
path.bglr = "../../../ARC_outputs/Met_same_genotypes_per_treatment/GBLUP/outputs_GBLUP/"
PreCorr = load_pred_corr_func(path=path.bglr, kernel = "BGLR", namm=NULL)
path.GK = "../../../ARC_outputs/Met_same_genotypes_per_treatment/GK/outputs_GK/"
PreCorr_GK = load_pred_corr_func(path=path.GK, kernel = "GK", namm=NULL)
path.bglr = "../../../ARC_outputs/Met_same_genotypes_per_treatment/GBLUP/outputs_GBLUP/"
PreCorr = load_pred_corr_func(path=path.bglr, kernel = "BGLR", namm=NULL)
# PreCorr = PreCorr %>% filter(Met != "ribitol")%>% droplevels()
path.GK = "../../../ARC_outputs/Met_same_genotypes_per_treatment/GK/outputs_GK/"
PreCorr_GK = load_pred_corr_func(path=path.GK, kernel = "GK", namm=NULL)
# PreCorr_GK = PreCorr_GK %>% filter(Met != "ribitol") %>% droplevels()
mu_perMet = ddply(PreCorr, c("Treatment", 'Met'), summarise, value=mean(Corr, na.rm=T))
Pred_Corr_dens = density_plot_generator(df=mu_perMet,
my_colors=RColorBrewer::brewer.pal(11, 'Spectral')[c(10,3)],
limits_range = c(-0.2,1),
breaks_range = seq(-0.2,1,0.2),
x_name = "Prediction accuracy",
ylim = NULL,
lines = T)
Pred_Corr_dens
# dev.print(pdf, file=paste0("../temp/BGLR_G_PredCorr_density.pdf"), height=4, width=8)
comp_PreCorr = compare_plot_generator(df = mu_perMet,
up_thr = 0.02,
low_thr = 0.15,
limits_range = c(0,0.7),
breaks_range = seq(0,0.7,0.1))
comp_PreCorr
# dev.print(pdf, file="../temp/Precorr_compare.pdf", height=8, width=8)
mu_perMet = ddply(PreCorr, c("Treatment", 'Met'), summarise, value=mean(Corr, na.rm=T))
Pred_Corr_dens = density_plot_generator(df=mu_perMet,
my_colors=RColorBrewer::brewer.pal(11, 'Spectral')[c(10,3)],
limits_range = c(-0.2,1),
breaks_range = seq(-0.2,1,0.2),
x_name = "Prediction accuracy",
ylim = NULL,
lines = T)
Pred_Corr_dens
# dev.print(pdf, file=paste0("../temp/BGLR_G_PredCorr_density.pdf"), height=4, width=8)
comp_PreCorr = compare_plot_generator(df = mu_perMet,
up_thr = 0.02,
low_thr = 0.15,
limits_range = c(0,0.7),
breaks_range = seq(0,0.7,0.1))
comp_PreCorr
# dev.print(pdf, file="../temp/Precorr_compare.pdf", height=8, width=8)
library(plyr)
df = PreCorr
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr)) +
facet_grid(rows = vars(Treatment))+
geom_boxplot(aes(fill=Treatment), outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite", y = "Prediction accuracy") +
theme_bw()+
geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(plyr)
# df = vgg
# df$Corr = vgg$value
df = PreCorr
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr)) +
facet_grid(rows = vars(Treatment))+
geom_boxplot(aes(fill=Treatment), outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(ggpubr)
ggarrange(Pred_Cor_boxplot,
NULL,
ggarrange(Pred_Corr_dens, comp_PreCorr,
ncol = 2, labels = c("(B)", "(C)"),
vjust=-0.1,
common.legend = F,
widths = c(1.2, 1)),
nrow = 3,
labels = c("(A)", ""), vjust=1.5, hjust=0,
heights = c(1.8, 0.1, 1),# Labels of the scatter plot
common.legend = F )
dev.print(pdf, file="../../../temp/GBLUP_plots.pdf", height=10, width=10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(readxl)
source("../../functions.R")
source("../../Functions/functions.R")
## Read into met.rr dataset to get NSFTV_ID in treatments.
met_rr_stress <- read.csv("../../../Met/met_rr_stress.csv")
met_rr_control <- read.csv("../../../Met/met_rr_control.csv")
source("../../Functions/functions.R")
## Read into met.rr dataset to get NSFTV_ID in treatments.
met_rr_stress <- read.csv("../../../Met/met_rr_stress.csv")
met_rr_control <- read.csv("../../../Met/met_rr_control.csv")
id_control <- met_rr_control$NSFTV_ID #162
id_stress <- met_rr_stress$NSFTV_ID #162
load("../../../Geno/geno.rr.RData")
geno <- geno_rr
geno_control = geno[id_control, ]
geno_stress = geno[id_stress, ]
Xcs_control = scale(geno_control, center = T, scale = T)
Xcs_stress = scale(geno_stress, center = T, scale = T)
XcsL = list(Control = Xcs_control,
Stress = Xcs_stress)
# save(XcsL, file="../Geno/XcsL.RData")
#GBLUP Gmatrix
G_control = tcrossprod(Xcs_control)/ncol(Xcs_control)
G_stress = tcrossprod(Xcs_stress)/ncol(Xcs_stress)
hist_draw_func <- function(GK, mainn){
hist(GK[upper.tri(GK)], main=mainn)
}
hist_draw_func(GK = G_control, mainn = 'G_control')
hist_draw_func(GK = G_stress, mainn = 'G_stress')
treatment = "Control"
treatment = "Stress"
Xcs <- XcsL[[treatment]]
D<- as.matrix(dist(Xcs, method="euclidean"))^2
Dmean <- D/mean(D)
Dmean_control = Dmean
Dmean_stress = Dmean
computeGK_func<- function(bw, Dmean){
GK <- exp(-bw * Dmean)
return(GK)
}
GK0.25_stress <- computeGK_func(bw=0.25, Dmean = Dmean_stress)
GK0.25_control = GK0.25_stress
# hist_draw_func(GK0.25_stress, "GK0.25_stress")
mean(GK0.25_stress[upper.tri(GK0.25_stress)])
GK1.5_stress <- computeGK_func(bw=1.5, Dmean = Dmean_stress)
GK1.5_control = GK1.5_stress
# hist_draw_func(GK1.5_stress, "GK1.5_stress")
mean(GK1.5_stress[upper.tri(GK1.5_stress)])
GKL = list(Control = list(GK0.25 = GK0.25_control,
GK1.5 = GK1.5_control),
Stress = list(GK0.25 = GK0.25_stress,
GK1.5 = GK1.5_stress))
# save(GKL, file = "../Geno/GKL.RData")
GK0.25_stress <- computeGK_func(bw=0.25, Dmean = Dmean_stress)
GK0.25_control = GK0.25_stress
hist_draw_func(GK0.25_stress, "GK0.25_stress")
mean(GK0.25_stress[upper.tri(GK0.25_stress)])
GK1.5_stress <- computeGK_func(bw=1.5, Dmean = Dmean_stress)
GK1.5_control = GK1.5_stress
hist_draw_func(GK1.5_stress, "GK1.5_stress")
mean(GK1.5_stress[upper.tri(GK1.5_stress)])
GKL = list(Control = list(GK0.25 = GK0.25_control,
GK1.5 = GK1.5_control),
Stress = list(GK0.25 = GK0.25_stress,
GK1.5 = GK1.5_stress))
# save(GKL, file = "../Geno/GKL.RData")
