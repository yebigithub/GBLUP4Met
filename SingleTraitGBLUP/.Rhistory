scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(plyr)
# df = vgg
# df$Corr = vgg$value
df = PreCorr
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
head(mu)
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr)) +
facet_grid(rows = vars(Treatment))+
geom_boxplot(aes(fill=Treatment), outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(ggpubr)
ggarrange(Pred_Cor_boxplot,
NULL,
ggarrange(Pred_Corr_dens, comp_PreCorr,
ncol = 2, labels = c("(B)", "(C)"),
vjust=-0.1,
common.legend = F,
widths = c(1.2, 1)),
nrow = 3,
labels = c("(A)", ""), vjust=1.5, hjust=0,
heights = c(1.8, 0.1, 1),# Labels of the scatter plot
common.legend = F )
dev.print(pdf, file="../../../temp/GBLUP_plots.pdf", height=10, width=10)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lme4)
library(readxl)
source("../../functions.R")
source("../../Functions/functions.R")
## Read into met.rr dataset to get NSFTV_ID in treatments.
met_rr_stress <- read.csv("../../../Met/met_rr_stress.csv")
met_rr_control <- read.csv("../../../Met/met_rr_control.csv")
source("../../Functions/functions.R")
## Read into met.rr dataset to get NSFTV_ID in treatments.
met_rr_stress <- read.csv("../../../Met/met_rr_stress.csv")
met_rr_control <- read.csv("../../../Met/met_rr_control.csv")
id_control <- met_rr_control$NSFTV_ID #162
id_stress <- met_rr_stress$NSFTV_ID #162
load("../../../Geno/geno.rr.RData")
geno <- geno_rr
geno_control = geno[id_control, ]
geno_stress = geno[id_stress, ]
Xcs_control = scale(geno_control, center = T, scale = T)
Xcs_stress = scale(geno_stress, center = T, scale = T)
XcsL = list(Control = Xcs_control,
Stress = Xcs_stress)
# save(XcsL, file="../Geno/XcsL.RData")
#GBLUP Gmatrix
G_control = tcrossprod(Xcs_control)/ncol(Xcs_control)
G_stress = tcrossprod(Xcs_stress)/ncol(Xcs_stress)
hist_draw_func <- function(GK, mainn){
hist(GK[upper.tri(GK)], main=mainn)
}
hist_draw_func(GK = G_control, mainn = 'G_control')
hist_draw_func(GK = G_stress, mainn = 'G_stress')
treatment = "Control"
treatment = "Stress"
Xcs <- XcsL[[treatment]]
D<- as.matrix(dist(Xcs, method="euclidean"))^2
Dmean <- D/mean(D)
Dmean_control = Dmean
Dmean_stress = Dmean
computeGK_func<- function(bw, Dmean){
GK <- exp(-bw * Dmean)
return(GK)
}
GK0.25_stress <- computeGK_func(bw=0.25, Dmean = Dmean_stress)
GK0.25_control = GK0.25_stress
# hist_draw_func(GK0.25_stress, "GK0.25_stress")
mean(GK0.25_stress[upper.tri(GK0.25_stress)])
GK1.5_stress <- computeGK_func(bw=1.5, Dmean = Dmean_stress)
GK1.5_control = GK1.5_stress
# hist_draw_func(GK1.5_stress, "GK1.5_stress")
mean(GK1.5_stress[upper.tri(GK1.5_stress)])
GKL = list(Control = list(GK0.25 = GK0.25_control,
GK1.5 = GK1.5_control),
Stress = list(GK0.25 = GK0.25_stress,
GK1.5 = GK1.5_stress))
# save(GKL, file = "../Geno/GKL.RData")
GK0.25_stress <- computeGK_func(bw=0.25, Dmean = Dmean_stress)
GK0.25_control = GK0.25_stress
hist_draw_func(GK0.25_stress, "GK0.25_stress")
mean(GK0.25_stress[upper.tri(GK0.25_stress)])
GK1.5_stress <- computeGK_func(bw=1.5, Dmean = Dmean_stress)
GK1.5_control = GK1.5_stress
hist_draw_func(GK1.5_stress, "GK1.5_stress")
mean(GK1.5_stress[upper.tri(GK1.5_stress)])
GKL = list(Control = list(GK0.25 = GK0.25_control,
GK1.5 = GK1.5_control),
Stress = list(GK0.25 = GK0.25_stress,
GK1.5 = GK1.5_stress))
# save(GKL, file = "../Geno/GKL.RData")
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met")
source("../../Functions/functions.R")
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met/SingleTraitGBLUP")
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met/SingleTraitGBLUP")
source("../../Functions/functions.R")
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met/SingleTraitGBLUP")
source("../Functions/functions.R")
met_names = met_name_func(mode = 'name')
delta_cv_100 <- readRDS("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/delta_cv_100.RDS")
temp1 <- reshape2::melt(corr.c.df)
PredCorr_conL <- list()
path=path.bglr
setwd("~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/Githubs/GBLUP4Met/SingleTraitGBLUP")
source("../Functions/functions.R")
met_names = met_name_func(mode = 'name')
path.bglr = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/"
PredCorr_conL <- list()
# PredCorr_trtL <- list()
nCV = 100
namm='delta'
# PredCorr_trtL <- list()
nCV = 100
for (i in 1:nCV){
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
# PredCorr_trtL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
}
path.bglr = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/"
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
path=path.bglr
for (i in 1:nCV){
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
# PredCorr_trtL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
}
# PredCorr_trtL <- list()
nCV = 100
PredCorr_conL <- list()
for (i in 1:nCV){
PredCorr_conL[[i]] <- readRDS(file=file.path(path,paste0(namm,"_cv_",i,".RDS")))
# PredCorr_trtL[[i]] <- readRDS(file=file.path(path,paste0(namm,"cv_",i,".RDS")))
}
corr.c.df <- do.call(rbind, PredCorr_conL)
colnames(corr.c.df)
dim(corr.c.df)
met_names
colnames(corr.c.df)= met_names
# corr.t.df <- do.call(rbind, PredCorr_trtL)
# corr.t.df = corr.t.df[,1:66]
# colnames(corr.t.df) = met_names
reshape2::melt(corr.c.df)
temp1 <- reshape2::melt(corr.c.df)
dim(temp1)
colnames(temp1)
View(temp1)
path.bglr = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/"
load_pred_corr_func <- function(path, namm, kernel){
PredCorr_L <- list()
nCV = 100
for (i in 1:nCV){
PredCorr_L[[i]] <- readRDS(file=file.path(path,paste0(namm,"_cv_",i,".RDS")))
}
corr.df <- do.call(rbind, PredCorr_L)
colnames(corr.df)= met_names
corr_long <- reshape2::melt(corr.df)
colnames(corr_long) <- c("CV", "Met", "Corr")
corr_long = corr_long %>% arrange(CV)
return(corr_long)
}
PreCorr = load_pred_corr_func(path=path.bglr, kernel = "BGLR", namm='delta')
library(tidyverse)
library(ggplot2)
library(plyr)
library(ggpubr)
library(ggrepel)
library(tidyverse)
library(stargazer)
library(patchwork)
library(ggplot2)
path.bglr = "~/Library/CloudStorage/OneDrive-VirginiaTech/Research/Codes/research/RiceUNLMetabolites/GBLUP4Met/outputs/GBLUP_delta/"
load_pred_corr_func <- function(path, namm, kernel){
PredCorr_L <- list()
nCV = 100
for (i in 1:nCV){
PredCorr_L[[i]] <- readRDS(file=file.path(path,paste0(namm,"_cv_",i,".RDS")))
}
corr.df <- do.call(rbind, PredCorr_L)
colnames(corr.df)= met_names
corr_long <- reshape2::melt(corr.df)
colnames(corr_long) <- c("CV", "Met", "Corr")
corr_long = corr_long %>% arrange(CV)
return(corr_long)
}
PreCorr = load_pred_corr_func(path=path.bglr, kernel = "BGLR", namm='delta')
dim(PreCorr)
View(PreCorr)
library(plyr)
df = PreCorr
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
library(plyr)
df = PreCorr
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr)) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# geom_hline(data=mu, aes(yintercept=corr.mean, color=Treatment), linetype='solid', linewidth = 1)+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = Met) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr), color = Met, fill = Met) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(plyr)
df = PreCorr
my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr, color = Met, fill = Met)) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr, color = Met, fill = Met)) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
# scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
# scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr, color = 'lightblue', fill = 'lightblue')) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
# scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
# scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr, fill = 'lightblue')) +
# facet_grid(rows = vars(Treatment))+
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
# scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
# scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr, fill = 'blue')) +
# facet_grid(rows = vars(Treatment
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3)+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
# scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
# scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
Pred_Cor_boxplot <- ggplot(df, aes(x=Met, y=Corr)) +
# facet_grid(rows = vars(Treatment
geom_boxplot(outlier.size=0.5, outlier.alpha = 0.7, lwd=0.3, fill = 'lightblue')+
labs(x="Metabolite accumulation", y = "Prediction accuracy") +
theme_bw()+
# scale_y_continuous(limits=c(-0.6, 0.9), breaks=c(-0.6,-0.4,-0.2, 0, 0.2,0.4,0.6, 0.8, 1)) +
# scale_fill_manual(values = ggplot2::alpha(my_colors, 0.7))+
# scale_color_manual(values = my_colors)+
theme(axis.text.x=element_text(size=8, angle=90, hjust=0.95, vjust=0.2),
axis.text.y=element_text(size=8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
# Create an alternating color variable
df$color_group <- rep(c("lightblue", "pink"), length.out = nrow(df))
# Plot with alternating colors
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("lightblue", "pink")) +
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
# Create an alternating color variable
df$color_group <- rep(c("lightblue", "pink"), length.out = nrow(df))
# Plot with alternating colors
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("lightblue", "pink")) +
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# my_colors <- RColorBrewer::brewer.pal(11, 'Spectral')[c(10, 3)]
# Create an alternating color variable
df$color_group <- rep(c("lightblue", "pink"), length.out = nrow(df))
# Plot with alternating colors
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("lightblue", "pink")) +
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# Create a color variable based on Corr value
df$color_group <- ifelse(df$Corr < 0, "pink", "lightblue")
# Plot with conditional colors and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
# dev.print(pdf, file="../temp/boxplot_BGLR_G.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/boxplot_gblup_delta.pdf", height = 6, width = 10)
library(plyr)
df = PreCorr
mu <- ddply(df, "Treatment", summarise, corr.mean=mean(Corr, na.rm=T))
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/boxplot_gblup_delta.png", height = 6, width = 10)
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
dev.print(png, file="../../../temp/boxplot_gblup_delta.png", height = 6, width = 10)
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
dev.print(png, file = "../../../temp/boxplot_gblup_delta.png", height = 600, width = 1000, units = "px")
library(plyr)
df = PreCorr
# Load dplyr for data manipulation
library(dplyr)
# Calculate mean Corr for each Met and assign colors based on the mean
df <- df %>%
group_by(Met) %>%
mutate(color_group = ifelse(mean(Corr) < 0, "pink", "lightblue")) %>%
ungroup()
# Plot with conditional colors based on average Corr and no legend
Pred_Cor_boxplot <- ggplot(df, aes(x = Met, y = Corr, fill = color_group)) +
geom_boxplot(outlier.size = 0.5, outlier.alpha = 0.7, lwd = 0.3) +
labs(x = "Metabolite accumulation", y = "Prediction accuracy") +
theme_bw() +
scale_fill_manual(values = c("pink" = "pink", "lightblue" = "lightblue")) +
guides(fill = "none") +  # Remove the legend
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0.95, vjust = 0.2),
axis.text.y = element_text(size = 8))
Pred_Cor_boxplot
dev.print(pdf, file="../../../temp/boxplot_gblup_delta.pdf", height = 6, width = 10)
